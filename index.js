const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const { consultarGemini } = require("./services/geminiService");

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static("public"));

app.post("/analise-curriculo", async (req, res) => {
    const { textoUsuario, tipo } = req.body;

   const prompt =
  tipo === "curriculo"
    ? `VocÃª Ã© um consultor de RH experiente. Analise e sugira melhorias para o seguinte perfil profissional, estruturando-o como um currÃ­culo eficaz. ForneÃ§a orientaÃ§Ãµes claras e objetivas sobre como organizar e apresentar cada parte, sem usar marcadores como asteriscos (*), traÃ§os (-) ou bullets. Prefira uma resposta com seÃ§Ãµes bem delimitadas por tÃ­tulos, e o conteÃºdo em forma de parÃ¡grafo corrido ou enumeraÃ§Ã£o simples.

InstruÃ§Ãµes:

1. Resumo Profissional:
Descreva como o usuÃ¡rio pode escrever um parÃ¡grafo introdutÃ³rio sobre sua experiÃªncia, Ã¡rea de atuaÃ§Ã£o e competÃªncias.

2. Habilidades TÃ©cnicas:
Oriente como listar as habilidades separadas por categoria (ex: Linguagens de ProgramaÃ§Ã£o, Backend, Frontend, Bancos de Dados, Ferramentas, Metodologias).

3. FormaÃ§Ã£o AcadÃªmica:
Explique como formatar corretamente essa seÃ§Ã£o com curso, instituiÃ§Ã£o e perÃ­odo.

4. ExperiÃªncias Profissionais ou Projetos:
Instrua como apresentar os projetos ou experiÃªncias anteriores, com nome, papel desempenhado, tecnologias usadas e resultados obtidos.

5. Linguagem e ApresentaÃ§Ã£o:
Assegure-se de que o tom seja profissional, direto e com exemplos especÃ­ficos quando necessÃ¡rio. Evite repetiÃ§Ãµes ou frases genÃ©ricas.

Aqui estÃ¡ o perfil fornecido pelo usuÃ¡rio:
${textoUsuario}`
    : `VocÃª Ã© um recrutador experiente. Simule uma entrevista de emprego com base no perfil profissional descrito abaixo. Comece com perguntas bÃ¡sicas e evolua para perguntas tÃ©cnicas e comportamentais, adaptadas ao conteÃºdo apresentado. Escreva de forma clara e sem usar marcadores como asteriscos (*), traÃ§os (-) ou bullets. 

Perfil do candidato:
${textoUsuario}`;
    try {
        const resposta = await consultarGemini(prompt);
        console.log("Resposta do Gemini:", resposta); // ðŸ‘ˆ Adiciona isso
        res.json({ resposta });
    } catch (error) {
        console.error("Erro ao consultar Gemini:", error.response?.data || error.message); // ðŸ‘ˆ Mostra erro detalhado
        res.status(500).json({ resposta: "Erro ao consultar Gemini." });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
